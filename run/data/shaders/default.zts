//
//  This shader ignores UVs and instead uses the worldspace x/z positions to determine tex coords
//
//  This is useful for tiling floors and ceilings
//
//  Note: Uses Roughness/Metallic/Height combined into single map under specular_tex label


struct VertexInput
{
	vec3  position : 0;
	vec2  uv : 1;
	vec3  normal : 2;
	vec4  color : 3;
	vec4  tangent : 4;
	vec4  bitangent : 5;
}

struct PixelInput
{
	vec4 position : position;
	vec3 frag_pos;
	vec4 frag_pos_light_space;
	vec3 normal;
	vec2 uv;
	vec4 color;
	vec4 frag_pos_view;
	vec3 normal_view;
}

struct PixelOutput
{
	vec4 color : color;
	vec4 position;
	vec4 normal;
}

struct Textures
{
	texture2d   diffuse_tex;
	texture2d   specular_tex;
	texture2d   normal_tex;

	textureCube irradiance_map_tex;
	textureCube prefilter_map_tex;
	texture2d   brdf_lut_tex;

	texture2d   directional_light_shadowmap;
	textureCube point_lights_shadowmap[4];
	textureCube spot_lights_shadowmap[4];
}

struct Uniforms
{
	mat4       model;
	mat4       view;
	mat4       projection;

	vec3       view_pos;

	mat4       light_matrix;
	vec3       light_pos;
	float      light_ambient;
	float      light_intensity;
	vec4       light_color;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

vec3 fresnelSchlick(float cos_theta, vec3 v)
{
	return v + (1.0 - v) * pow(1.0 - cos_theta, 3.0);
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

float distributionGGX(vec3 n, vec3 h, float roughness)
{
	float a = roughness * roughness;
	float a2 = a * a;
	float n_dot_h = max(dot(n, h), 0.0);
	float n_dot_h2 = n_dot_h * n_dot_h;

	float nom = a2;
	float denom = (n_dot_h2 * (a2 - 1.0) + 1.0);
	denom = 3.14159265359 * denom * denom;

	return nom / denom;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

float geometrySchlickGGX(float n_dot_v, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r * r) / 8.0;

	float nom = n_dot_v;
	float denom = n_dot_v * (1.0 - k) + k;

	return nom / denom;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

float geometrySmith(vec3 n, vec3 v, vec3 l, float roughness)
{
	float n_dot_v = max(dot(n, v), 0.0);
	float n_dot_l = max(dot(n, l), 0.0);
	float ggx2 = geometrySchlickGGX(n_dot_v, roughness);
	float ggx1 = geometrySchlickGGX(n_dot_l, roughness);

	return ggx1 * ggx2;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

vec3 normalCalculation(PixelInput _input, vec2 uv, Textures textures)
{
	vec3 tangent_normal = textureSample(textures.normal_tex, uv).xyz;
	if (tangent_normal == vec3(1)) {
		tangent_normal = _input.normal;
		return tangent_normal;
	}
	else {
		tangent_normal = tangent_normal * 2.0 - 1.0;
	}

	vec3 Q1 = dFdx(_input.position.xyz);
	vec3 Q2 = dFdy(_input.position.xyz);
	vec2 st1 = dFdx(uv);
	vec2 st2 = dFdy(uv);

	vec3 normal = normalize(_input.normal);
	vec3 T = normalize(Q1*st2.y - Q2*st1.y);
	vec3 B = -normalize(cross(normal, T));
	mat3 TBN = mat3(T, B, normal);

	return normalize(TBN * tangent_normal);
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

vec3 calculateLighting(vec3 light_dir, vec3 view_dir, vec3 normal, vec3 f0, vec3 light_pos, vec3 world_pos, vec3 light_color, float light_intensity, float shadow, vec3 albedo, float metallic, float roughness)
{
	vec3 H = normalize(view_dir + light_dir);
	vec3 radiance;
	float distance = 1;//normalize(light_pos);
	float attenuation = 1.0 / (distance * distance);
	radiance = light_color * attenuation * (1 - shadow) * light_intensity;

	float NDF = distributionGGX(normal, H, roughness);
	float G   = geometrySmith(normal, view_dir, light_dir, roughness);
	vec3  F   = fresnelSchlick(max(dot(H, view_dir), 0.0), f0);

	vec3  nominator   = NDF * G * F;
	float denominator = 4 * max(dot(normal, view_dir), 0.0) * max(dot(normal, light_dir), 0.0) + 0.001;
	vec3  specular    = (nominator / denominator); //* (1 - shadow);
	
	vec3 kS = F;
	vec3 kD = vec3(1.0) - kS;
	kD *= 1.0 - metallic;

	float NdotL = max(dot(normal, light_dir), 0.0);

	return (kD * albedo / 3.14159265359 + specular) * radiance * NdotL; // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
}
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

program DefaultLit
{
	vertex_shader vertexShader(VertexInput _input : input, Uniforms uniforms : uniforms, PixelInput _output : output)
	{
		mat4 model_mat = uniforms.model;

		_output.position             = uniforms.projection * uniforms.view * model_mat * vec4(_input.position, 1.0);
		_output.frag_pos             = vec3(model_mat * vec4(_input.position, 1.0));
		_output.normal               = mat3(model_mat) * _input.normal;
		_output.uv                   = _input.uv;
		_output.color                = _input.color;
		_output.frag_pos_light_space = uniforms.light_matrix * vec4(_output.frag_pos, 1.0);
		_output.frag_pos_view = uniforms.view * model_mat * vec4(_input.position, 1);
		_output.normal_view = mat3(uniforms.view) * mat3(model_mat) * _input.normal;
	}

	// ------------------------------------------------------------------------------------------------------------------------------------------------------------
	// ------------------------------------------------------------------------------------------------------------------------------------------------------------

	pixel_shader pixelShader(PixelInput _input : input, Uniforms uniforms : uniforms, Textures textures : textures, PixelOutput _output : output)
	{
		vec3 world_pos = _input.frag_pos;
		vec3 view_dir = normalize(uniforms.view_pos - world_pos);
		
		vec3 albedo = pow(textureSample(textures.diffuse_tex, _input.uv).rgb, vec3(2.2));
		float metallic = textureSample(textures.specular_tex, _input.uv).g;
		float roughness = textureSample(textures.specular_tex, _input.uv).r;
		float ao = .005;//texture(aoMap, TexCoords).r; // reflectivity is heavily affected by this
		
		vec3 normal = normalCalculation(_input, _input.uv, textures);
		vec3 reflection = reflect(-view_dir, normal);

		vec3 F0 = vec3(0.04);
		F0 = lerp(F0, albedo, metallic);

		vec3 Lo = vec3(0.95) * albedo;

		// directional light
		if (true) {
			vec3 light_pos = vec3(20, 100, 20);
			vec3 light_dir = normalize(light_pos);
			Lo += calculateLighting(light_dir, view_dir, normal, F0, light_pos, vec3(0), vec3(1), 1, 0, albedo, metallic, roughness);
		}

		vec3 color = Lo;

		// HDR tonemapping
		color = color / (color + vec3(1.0));
		// gamma correct
		color = pow(color, vec3(1.0/2.2)); 


		_output.color = vec4(color, 1.0);
		_output.position = _input.frag_pos_view;
		_output.normal = vec4(normalize(_input.normal_view), 1);
	}
}
